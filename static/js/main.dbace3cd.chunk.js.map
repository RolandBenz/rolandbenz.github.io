{"version":3,"sources":["Table.js","Form.js","App.js","index.js"],"names":["TableHeader","react_default","a","createElement","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","Table_TableHeader","Table_TableBody","Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","value","setState","defineProperty","onFormSubmit","preventDefault","handleSubmit","state","initialState","submitForm","_this$state","onSubmit","for","type","id","onChange","Component","App","characters","filter","character","i","concat","toConsumableArray","className","src_Table","src_Form","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.dbace3cd.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TableHeader = () => {\n  return (\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Job</th>\n        <th>Remove</th>\n      </tr>\n    </thead>\n  );\n};\n\nconst TableBody = (props) => {\n  /* \n\t\t- Rows gets the jsx for each row in characterData through map method\n\t\t\thttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n\t\t- Row contains name, job. Index is a map internal iterator variable.\n\t\t- You should always use keys when making lists in React, as they help identify each list item.\n\t*/\n  const rows = props.characterData.map((row, index) => {\n    return (\n      <tr key={index}>\n        <td>{row.name}</td>\n        <td>{row.job}</td>\n        <td>\n          <button onClick={() => props.removeCharacter(index)}>Delete</button>\n        </td>\n      </tr>\n    );\n  });\n\n  return <tbody>{rows}</tbody>;\n};\n\n/*\n\t- Since Table does not have its own state, \n\t \tit is best practice to define Table as a simple component, not a class component.\n*/\nconst Table = (props) => {\n  /*\n\t\t- ES6 property shorthand to create the variables characterData, removeCharacters\n\t\t\tthat contains props.\n\t*/ \t\n  const { characterData, removeCharacter } = props;\n  return (\n    <table>\n      <TableHeader />\n      <TableBody\n        characterData={characterData}\n        removeCharacter={removeCharacter}\n      />\n    </table>\n  );\n};\n\nexport default Table;\n","import React, { Component } from \"react\";\n\n/*\n\t- Our goal for this form will be to update the state of Form \n\t\tevery time a field is changed in the form, \n\t\tand when we submit, all that data will pass to the App state, \n\t\twhich will then update the Table.\n*/\nclass Form extends Component {\n  /*\n\t\t- Class component Form gets a constructor with an initial state with empty properties \n\t\t- Previously, it was necessary to include a constructor() on React class components, \n\t\t\tbut it's not required anymore.\n\t*/\n\tconstructor(props) {\n    super(props);\n\n    this.initialState = {\n      name: \"\",\n      job: \"\",\n    };\n    this.state = this.initialState;\n  }\n\t/*\n\t\t- Function that handels onChange event every time a change is made to an input. \n\t\t- The event will be passed through, \n\t\t\tand we'll set the state of Form to have the name (key) and value of the inputs. \n\t*/\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\t/*\n\t\t- Function that handels submit event of the button. \n\t\t- It is the newer version on GitHub\n\t*/\n  onFormSubmit = (event) => {\n\t\t/*\n\t\t\t- method preventDefault() prevents something, not clear what. \n\t\t*/\n    event.preventDefault();\n\t\t/*\n\t\t\t- pass this.state to handleSubmit method of App\n\t\t\t\twhich submits this data and updates the parent state\n\t\t\t- set the state of Form to initial empty state\n\t\t*/\n    this.props.handleSubmit(this.state);\n    this.setState(this.initialState);\n  };\n\t/*\n\t\t- Function that handels submit event of the button. \n\t\t- It is the older version of the website tutorial\n\t*/\n\tsubmitForm = () => {\n\t\tthis.props.handleSubmit(this.state)\n\t\tthis.setState(this.initialState)\n\t}\n\n  render() {\n\t\t/*\n      - ES6 property shorthand to create a variables 'name, job' that contains this.state\n    */\n    const { name, job } = this.state;\n\n    return (\n      <form onSubmit={this.onFormSubmit}>\n        <label for=\"name\">Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          value={name}\n          onChange={this.handleChange}\n        />\n        <label for=\"job\">Job</label>\n        <input\n          type=\"text\"\n          name=\"job\"\n          id=\"job\"\n          value={job}\n          onChange={this.handleChange}\n        />\n\t\t\t\t{/*\n\t\t\t\t\t- button above: newer version on GitHub, here the function that handles the submit \n\t\t\t\t\t\tis defined in the form label as onSubmit={this.onFormSubmit}\n\t\t\t\t\t- input below: older version in tutorial on website \n\t\t\t\t*/}\n        <button type=\"submit\">Submit</button>\n\t\t\t\t<input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","/*\n  - We're loading the Component as a property of React, \n    so we no longer need to extend React.Component.\n  - Most React apps have many small components, and everything loads into the main App component. \n    Components also often get their own file, e.g. Table.js, Form.js.\n*/\nimport React, { Component } from \"react\";\nimport Table from \"./Table\";\nimport Form from \"./Form\";\n\nclass App extends Component {\n  /*\n\t\t- Previously, it was necessary to include a constructor() on React class components, \n\t\t\tbut it's not required anymore.\n\t*/\n  /* \n    - You can think of state as any data that should be saved and modified \n      without necessarily being added to a database - \n      for example, adding and removing items from a shopping cart before confirming your purchase.\n    - state = {} is an Object object\n    - The object will contain properties for everything you want to store in the state. \n      For us, it's characters.\n    - https://www.w3schools.com/js/js_object_constructors.asp\n      https://stackoverflow.com/questions/21545687/javascript-vs-new-object-performance\n      - let x1 = \"\"; Use string literals \"\" instead of new String().\n      - let x2 = 0; Use number literals 50 instead of new Number().\n      - let x3 = false; Use boolean literals true / false instead of new Boolean().\n      - const x4 = {}; Use object literals {} instead of new Object().\n      - const x5 = []; Use array literals [] instead of new Array().\n      - const x6 = /()/ Use pattern literals /()/ instead of new RegExp().\n      - const x7 = function(){}; Use function expressions () {} instead of new Function().\n  */\n  state = {\n    /* \n      - We can also add data to an array of objects, \n        as if we were bringing in a JSON-based API.\n    */\n    //characters: []\n    characters: [\n      {\n        name: 'Charlie',\n        job: 'Janitor',\n      },\n      {\n        name: 'Mac',\n        job: 'Bouncer',\n      },\n      {\n        name: 'Dee',\n        job: 'Aspring actress',\n      },\n      {\n        name: 'Dennis',\n        job: 'Bartender',\n      },\n    ],\n  };\n  /* \n    - Button event handler function which uses index to remove a row from this.state={characters:[]}\n  */\n  removeCharacter = (index) => {\n    /*\n      - ES6 property shorthand to create a variable 'characters' that contains this.state\n    */\n    const { characters } = this.state;\n    /*\n      - You must use this.setState() to modify an array. \n        Simply applying a new value to this.state.property will not work. \n      - filter does not mutate but rather creates a new array, \n        and is a preferred method for modifying arrays in JavaScript. \n      - This particular method is testing an index vs. all the indices in the array, \n        and returning all but the one that is passed through.\n        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter?retiredLocale=vi\n    */\n    this.setState({\n      characters: characters.filter((character, i) => {\n        return i !== index;\n      }),\n    });\n  };\n  /* \n    - Form event handler function to add a row to this.state={characters:[]}\n    - updates the state by taking the existing this.state.characters \n      and adding the new character parameter, using the ES6 spread operator.\n      https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\n  */\n  handleSubmit = (character) => {\n    this.setState({ characters: [...this.state.characters, character] });\n  };\n\n  render() {\n    /*\n      - ES6 property shorthand to create a variable 'characters' that contains this.state\n    */\n    const { characters } = this.state;\n\n    return (\n      /*\n\t\t\t\t- Notice that we use className instead of class. \n\t\t\t\t  This is our first hint that the code being written here is JavaScript, \n\t\t\t\t  and not actually HTML.\n        - It is JSX, which stands for JavaScript XML.\n          With JSX, we can write what looks like HTML,\n          and also we can create and use our own XML-like tags. \n        - Using JSX is not mandatory for writing React. \n        - Under the hood, it's running createElement, which takes the tag, \n          object containing the properties, and children of the component \n          and renders the same information.\n        - Properties and methods in JSX are camelCase - onclick will become onClick.\n        - Self-closing tags must end in a slash - e.g. <img />\n        - JavaScript expressions can also be embedded inside JSX using curly braces, \n          including variables, functions, and properties.\n            const name = 'Tania'\n            const heading = <h1>Hello, {name}</h1>\n\t\t\t*/\n      <div className=\"container\">\n        <h1>React Tutorial</h1>\n        <p>Add a character with a name and a job to the table.</p>\n        {/*\n            - Load the simple component Table - which is a function\n            - Compontent is Table, \n            - Properties are characterData, removeCharacter, \n            - JavaScript Expressions are characters - which is data, \n              and this.removeCharacter - which is a function\n        */}\n        <Table\n          characterData={characters}\n          removeCharacter={this.removeCharacter}\n        />\n        <h3>Add New</h3>\n        {/*\n            - Load the class component Form - which is a class\n            - Component is Form\n            - Property is handleSubmit\n            - Javascript Expression is this.handleSubmit - which is a a function\n        */}\n        <Form handleSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//import App from './Api';\nimport './index.css';\n\n//Entry Point for our App is <div id=\"root\"></div> in public/index.html\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}